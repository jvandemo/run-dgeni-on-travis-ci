import {Router} from '../src/router';

describe('Router', () => {
  var router,
      view;

  it('should initialize', () => {
    router = new Router();
    expect(router).toBeDefined();
  });

  describe('config', () => {
    it('should renavigate after being configured', sync(async () => {
      router = new Router();
      view = makeMockComponent('root');
      await router.registerViewport(view);
      await router.navigate('/a');
      expect(view.activate).not.toHaveBeenCalled();

      await router.config([
        { path: '/a', component: 'A' }
      ]);
      expect(view.activate).toHaveBeenCalled();
    }));

    it('should throw if two viewports are registered with the same name', sync(async () => {
      router = new Router();
      view = makeMockComponent('root');
      await router.registerViewport(view);
      expect(() => router.registerViewport(view)).toThrow();
    }));
  });

  describe('with a simple config', () => {
    beforeEach(sync(async () => {
      router = new Router();
      view = makeMockComponent('root');
      await router.registerViewport(view);
      await router.config([
        { path: '/a', component: 'A' }
      ]);
    }));

    it('should activate viewports on navigation', sync(async () => {
      await router.navigate('/a');
      expect(view.activate).toHaveBeenCalled();
    }));

    it('should check if it can navigate', sync(async () => {
      spyOn(router, 'navigationPredicate').and.callThrough();
      var status = await router.canNavigate('/a');

      expect(status).toBe(true);
      expect(router.navigationPredicate).toHaveBeenCalled();
    }));

    it('should check the canActivate hook to see if it can navigate', sync(async () => {
      view.canActivate = jasmine.createSpy('canActivate component').and.returnValue(true);
      var status = await router.canNavigate('/a/b');
      expect(status).toBe(true);

      view.canActivate = jasmine.createSpy('canActivate component').and.returnValue(false);
      status = await router.canNavigate('/a/b');
      expect(status).toBe(false);
    }));

    it('should check the canDeactivate hook to see if it can navigate', sync(async () => {
      view.canDeactivate = jasmine.createSpy('canDeactivate component').and.returnValue(true);
      var status = await router.canNavigate('/a/b');
      expect(status).toBe(true);

      view.canDeactivate = jasmine.createSpy('canDeactivate component').and.returnValue(false);
      status = await router.canNavigate('/a/b');
      expect(status).toBe(false);
    }));

    it('should generate URLs', () => {
      expect(router.generate('A', {})).toBe('/a');
    });

    it('should navigate viewports registered after a navigation happens', sync(async () => {
      router = new Router();
      view = makeMockComponent('root');
      router.config([
        { path: '/a', component: 'A' }
      ]);
      await router.navigate('/a');
      expect(view.activate).not.toHaveBeenCalled();

      await router.registerViewport(view);
      expect(view.activate).toHaveBeenCalled();
    }));


    describe('with child routers', () => {
      var child, childView;

      beforeEach(() => {
        child = router.childRouter();
        child.config([
          { path: '/b', component: 'B' },
          { path: '/c', component: 'C' }
        ]);
        childView = makeMockComponent('child');
        child.registerViewport(childView);
      });

      it('should check if it can navigate', sync(async () => {
        spyOn(child, 'navigationPredicate').and.callThrough();
        var status = await router.canNavigate('/a/b');

        expect(status).toBe(true);
        expect(child.navigationPredicate).toHaveBeenCalled();
      }));

      it('should activate viewports on navigation', sync(async () => {
        await router.navigate('/a/b');

        expect(view.activate).toHaveBeenCalled();
        expect(childView.activate).toHaveBeenCalled();
      }));

      it('should deactivate children when navigating away', sync(async () => {
        router.config([
          { path: '/d', component: 'D' }
        ]);

        await router.navigate('/a/b');

        expect(view.activate).toHaveBeenCalled();
        expect(childView.activate).toHaveBeenCalled();

        await router.navigate('/d');
        expect(childView.deactivate).toHaveBeenCalled();
      }));

      it('should not activate parent viewports when the matched segment stays the same', sync(async () => {
        await router.navigate('/a/b');

        expect(view.activate).toHaveBeenCalled();
        expect(childView.activate).toHaveBeenCalled();

        view.activate.calls.reset();
        childView.activate.calls.reset();

        await router.navigate('/a/c');

        expect(view.activate).not.toHaveBeenCalled();
        expect(childView.activate).toHaveBeenCalled();
      }));

      it('should not activate viewports if a predicate returns false', sync(async () => {
        child.navigationPredicate = () => Promise.resolve(false);
        await router.navigate('/a/b');

        expect(view.activate).not.toHaveBeenCalled();
        expect(childView.activate).not.toHaveBeenCalled();
      }));

      it('should generate URLs', sync(async () => {
        // a child can't generate a route unless it has been navigated to
        await router.navigate('/a/c');

        expect(router.generate('A', {})).toBe('/a');
        expect(child.generate('C', {})).toBe('/a/c');
      }));
    });
  });
});

function sync (fn) {
  return async (done) => {
    try {
      await fn();
    } catch (e) {
      expect(e.stack).toBe('');
    } finally {
      done();
    }
  }
}

function makeMockComponent (name = '') {
  return {
    instantiate: () => {},
    load: () => {},
    activate: jasmine.createSpy(name + ' activate component').and.returnValue(Promise.resolve()),
    deactivate: jasmine.createSpy(name + ' deactivate component').and.returnValue(Promise.resolve())
  };
}
